-> npm init -y -define node.js project
-> npm i express cors dotenv mongoose jsonwebtoken bcryptjs morgan helmet
-> npm i nodemon --save-dev

-> app.get('/', (req, res) => { ... });
This defines a route. It tells the server how to respond when it receives an HTTP GET request to the root URL (/).
-req (request): An object containing information about the incoming request.
-res (response): An object used to send a response back to the client.
-res.send('Hello World');: This sends the string "Hello World" back to the browser.

-> CORS Middleware
-CORS stands for Cross-Origin Resource Sharing. By default, web browsers block web pages from making API requests to a different domain (origin) than the one that served the page. This is a security feature called the Same-Origin Policy.

-The cors middleware solves this problem. It adds the necessary HTTP headers to your server's responses (like Access-Control-Allow-Origin: *) to tell the browser that it's safe to allow requests from other origins.

-import cors from 'cors';
app.use(cors()); // Allows requests from all origins


-> JSON Parser Middleware
-This middleware is built into Express and is crucial for handling modern APIs. When a client sends data to your server in the body of a request (typically with POST or PUT), it's often in JSON format.

-The express.json() middleware parses these incoming JSON payloads. It takes the raw JSON string from the request body and converts it into a JavaScript object, which it then attaches to req.body. Without this, req.body would be undefined.

-// This is required to read JSON from request bodies
app.use(express.json());

app.post('/api/users', (req, res) => {
  // Thanks to express.json(), req.body contains the parsed JSON data
  const userName = req.body.name; 
  console.log(userName);
  res.send('User created!');
});